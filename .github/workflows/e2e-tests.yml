name: e2e tests and deploy

on:
  push:
    branches:
      - main
    paths:
      - 'template/app/**'
  pull_request:
    branches:
      - main
    paths:
      - 'template/app/**'
  workflow_dispatch:

env:
  WASP_TELEMETRY_DISABLE: 1
  WASP_VERSION: 0.17.0
  SERVER_APP_NAME: "pokemon-server"
  # After you know the server URL, put the URL here
  SERVER_APP_URL: "https://apitestingwasp.duckdns.org"
  # Put your client app name here
  CLIENT_APP_NAME: "pokemon-client"
  DOCKER_REGISTRY: "ghcr.io"
  DOCKER_REGISTRY_USERNAME: karthick1005
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.GHCR_PAT }}

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout the repo
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       id: setup-node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'

  #     - name: Docker setup
  #       uses: docker/setup-buildx-action@v3

  #     - name: Install Wasp
  #       run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v ${{ env.WASP_VERSION }}

  #     - name: Cache global node modules
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.npm
  #         key: node-modules-${{ runner.os }}-${{ hashFiles('template/app/package-lock.json') }}-${{ hashFiles('template/e2e-tests/package-lock.json') }}-wasp${{ env.WASP_VERSION }}-node${{ steps.setup-node.outputs.node-version }}
  #         restore-keys: |
  #           node-modules-${{ runner.os }}-

  #     - name: Set required wasp app env vars to mock values
  #       working-directory: ./template/app
  #       run: |
  #         cp .env.server.example .env.server && cp .env.client.example .env.client

  #     - name: '[e2e-tests] Install Node.js dependencies for Playwright tests'
  #       working-directory: ./template/e2e-tests
  #       run: npm ci

  #     - name: "[e2e-tests] Store Playwright's Version"
  #       working-directory: ./template/e2e-tests
  #       run: |
  #         PLAYWRIGHT_VERSION=$(npm ls @playwright/test | grep @playwright | sed 's/.*@//')
  #         echo "Playwright's Version: $PLAYWRIGHT_VERSION"
  #         echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV

  #     - name: "[e2e-tests] Cache Playwright Browsers for Playwright's Version"
  #       id: cache-playwright-browsers
  #       uses: actions/cache@v4
  #       with:
  #         path: ~/.cache/ms-playwright
  #         key: playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}-${{ runner.os }}

  #     - name: '[e2e-tests] Set up Playwright'
  #       if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
  #       working-directory: ./template/e2e-tests
  #       run: npx playwright install --with-deps

  #     - name: '[e2e-tests] Install Stripe CLI'
  #       run: |
  #         curl -s https://packages.stripe.dev/api/security/keypair/stripe-cli-gpg/public | gpg --dearmor | sudo tee /usr/share/keyrings/stripe.gpg
  #         echo "deb [signed-by=/usr/share/keyrings/stripe.gpg] https://packages.stripe.dev/stripe-cli-debian-local stable main" | sudo tee -a /etc/apt/sources.list.d/stripe.list
  #         sudo apt update
  #         sudo apt install stripe

  #     - name: '[e2e-tests] Run Stripe CLI to listen for webhooks'
  #       env:
  #         STRIPE_DEVICE_NAME: ${{ secrets.STRIPE_DEVICE_NAME }}
  #       run: |
  #         stripe listen --api-key ${{ secrets.STRIPE_KEY }} --forward-to localhost:3001/payments-webhook &

  #     - name: '[e2e-tests] Run Playwright tests'
  #       env:
  #         OPENAI_API_KEY: dummy-key-for-testing
  #         STRIPE_API_KEY: dummy-stripe-key
  #         STRIPE_WEBHOOK_SECRET: dummy-webhook-secret
  #         STRIPE_CUSTOMER_PORTAL_URL: https://billing.stripe.com/p/login/test_8wM8x17JN7DT4zC000
  #         PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID: dummy-hobby-plan
  #         PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID: dummy-pro-plan
  #         PAYMENTS_CREDITS_10_PLAN_ID: dummy-credits-plan
  #         SKIP_EMAIL_VERIFICATION_IN_DEV: true
  #         REACT_APP_GOOGLE_ANALYTICS_ID: G-H3LSJCK95H
  #       working-directory: ./template/e2e-tests
  #       run: npm run e2e:playwright


  deploy:
    # needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.DOCKER_REGISTRY_USERNAME }}
          password: ${{ env.DOCKER_REGISTRY_PASSWORD }}
      - name: Checkout the repo
        uses: actions/checkout@v4

      - name: (server) Extract metadata for Docker
        id: meta-server
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REGISTRY_USERNAME }}/${{ env.SERVER_APP_NAME }}

      - name: (client) Extract metadata for Docker
        id: meta-client
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REGISTRY_USERNAME }}/${{ env.CLIENT_APP_NAME }}

      - name: Install root npm dependencies
        working-directory: ./template/app
        run: |
          npm install
      - name: Install Wasp
        run: curl -sSL https://get.wasp.sh/installer.sh | sh -s -- -v ${{ env.WASP_VERSION }}
     
      - name: Build Wasp app (generates .wasp/build and its package.json)
        shell: bash
        working-directory: ./template/app
        run: |
          wasp build
      - name: List all folders and files (including hidden)
        working-directory: ./
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing all folders and files recursively (including hidden):"
          ls -aR
      - name: (client) Build
        working-directory: ./template/app/.wasp/build/web-app
        run: |
          REACT_APP_API_URL=${{ env.SERVER_APP_URL }} REACT_APP_GOOGLE_ANALYTICS_ID=G-QJ5ZFJ024D npm run build
     
      - name: (client) Prepare the Dockerfile
        shell: bash
        working-directory: ./template/app/.wasp/build/web-app
        run: |
          echo "FROM pierrezemb/gostatic" > Dockerfile
          echo "CMD [\"-fallback\", \"index.html\", \"-enable-logging\"]" >> Dockerfile
          echo "COPY ./build /srv/http" >> Dockerfile

      - name: Echo owner
        run: echo "Repo owner is ${{ github.repository_owner }}"
      - name: (server) Build and push Docker image
        uses: docker/build-push-action@v6

        with:
          # REMOVE the `app` bit from the path if your app is not in the `app` folder
          context: ./template/app/.wasp/build
          # REMOVE the `app` bit from the path if your app is not in the `app` folder
          file: ./template/app/.wasp/build/Dockerfile
          push: true
          tags: ghcr.io/karthick1005/pokemon-server:latest
          # labels: ${{ steps.meta-server.outputs.labels }}

      - name: (client) Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          # REMOVE the `app` bit from the path if your app is not in the `app` folder
          context: ./template/app/.wasp/build/web-app
          # REMOVE the `app` bit from the path if your app is not in the `app` folder
          file: ./template/app/.wasp/build/web-app/Dockerfile
          push: true
          tags: ghcr.io/karthick1005/pokemon-client:latest
          # labels: ${{ steps.meta-client.outputs.labels }}

      # You can get the webhook URLs from the Coolify dashboard
      # Put them in the repository secrets under CLIENT_COOLIFY_WEBHOOK and SERVER_COOLIFY_WEBHOOK
      - name: Trigger Deploy Webhooks
        env:
          CLIENT_COOLIFY_WEBHOOK: ${{ secrets.CLIENT_COOLIFY_WEBHOOK }}
          SERVER_COOLIFY_WEBHOOK: ${{ secrets.SERVER_COOLIFY_WEBHOOK }}
          COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}
        run: |
          curl "${{ env.CLIENT_COOLIFY_WEBHOOK }}" --header 'Authorization: Bearer ${{ env.COOLIFY_TOKEN }}'
          curl "${{ env.SERVER_COOLIFY_WEBHOOK }}" --header 'Authorization: Bearer ${{ env.COOLIFY_TOKEN }}'