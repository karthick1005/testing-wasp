name: Deploy Apps to Coolify

on:
  push:
    branches:
      - apps-publish
    paths:
      - 'apps/**'
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_REGISTRY_USERNAME: ${{ github.repository_owner }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  NODE_VERSION: "18"
  COOLIFY_API_URL: "http://34.136.254.179:8000/api"  # Change to your Coolify API URL
  COOLIFY_TOKEN: ${{ secrets.COOLIFY_TOKEN }}

jobs:
  detect-changed-apps:
    runs-on: ubuntu-latest
    outputs:
      changed_apps: ${{ steps.set_changed_apps.outputs.apps }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed apps
        id: set_changed_apps
        run: |
          if [[ -z "${{ github.event.before }}" || "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]]; then
            git fetch --depth=2 origin main
            BASE_SHA=$(git rev-parse HEAD^)
          else
            BASE_SHA="${{ github.event.before }}"
          fi
          echo "BASE_SHA=$BASE_SHA"

          CHANGED_FILES=$(git diff --name-only $BASE_SHA ${{ github.sha }})

          echo "Changed files:"
          echo "$CHANGED_FILES"

          APPS_CHANGED=()
          for file in $CHANGED_FILES; do
            if [[ "$file" == apps/* ]]; then
              app_name=$(echo $file | cut -d/ -f2)
              APPS_CHANGED+=($app_name)
            fi
          done

          # Remove duplicates
          UNIQUE_APPS=($(echo "${APPS_CHANGED[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))

          echo "Apps changed: ${UNIQUE_APPS[@]}"

          echo "::set-output name=apps::${UNIQUE_APPS[*]}"

  deploy-apps:
    needs: detect-changed-apps
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [${{ needs.detect-changed-apps.outputs.changed_apps }}]

    if: matrix.app != ''

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Ensure Coolify resource exists and is linked
        env:
          APP_NAME: ${{ matrix.app }}
          COOLIFY_API_URL: ${{ env.COOLIFY_API_URL }}
          COOLIFY_TOKEN: ${{ env.COOLIFY_TOKEN }}
        run: |
          # 1. Get app ID (assumes project already exists)
          app_response=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/apps?name=$APP_NAME")
          app_id=$(echo "$app_response" | jq -r '.data[0].id')

          if [ -z "$app_id" ] || [ "$app_id" == "null" ]; then
            echo "App ID not found for $APP_NAME. Please create the project manually."
            exit 1
          fi

          # 2. Check if resource exists (resource name = app name)
          resources_response=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/resources?name=$APP_NAME")
          resource_id=$(echo "$resources_response" | jq -r '.data[0].id')

          if [ -z "$resource_id" ] || [ "$resource_id" == "null" ]; then
            echo "Resource not found, creating resource for $APP_NAME..."

            create_resource_response=$(curl -s -X POST \
              -H "Authorization: Bearer $COOLIFY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"name\":\"$APP_NAME\",\"type\":\"container\",\"config\":{\"dockerfilePath\":\"apps/$APP_NAME/Dockerfile\"}}" \
              "$COOLIFY_API_URL/resources")

            resource_id=$(echo "$create_resource_response" | jq -r '.data.id')
            echo "Created resource with ID: $resource_id"
          else
            echo "Resource already exists with ID: $resource_id"
          fi

          # 3. Link resource to app if not linked
          linked_resources=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/apps/$app_id/resources")
          linked=$(echo "$linked_resources" | jq --arg rid "$resource_id" '.data | map(select(.id == $rid)) | length')

          if [ "$linked" -eq 0 ]; then
            echo "Linking resource $resource_id to app $app_id..."
            curl -s -X POST \
              -H "Authorization: Bearer $COOLIFY_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"resourceId\": \"$resource_id\"}" \
              "$COOLIFY_API_URL/apps/$app_id/resources"
            echo "Resource linked."
          else
            echo "Resource already linked to app."
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Log in to Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_REGISTRY_USERNAME }}
          password: ${{ env.DOCKER_REGISTRY_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REGISTRY_USERNAME }}/${{ matrix.app }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./apps/${{ matrix.app }}
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Trigger Coolify deployment
        env:
          COOLIFY_API_URL: ${{ env.COOLIFY_API_URL }}
          COOLIFY_TOKEN: ${{ env.COOLIFY_TOKEN }}
          APP_NAME: ${{ matrix.app }}
        run: |
          echo "Triggering deployment for $APP_NAME"
          # Get app ID first
          app_response=$(curl -s -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/apps?name=$APP_NAME")
          app_id=$(echo "$app_response" | jq -r '.data[0].id')

          if [ "$app_id" == "null" ] || [ -z "$app_id" ]; then
            echo "App ID not found, cannot trigger deployment."
            exit 1
          fi

          deploy_response=$(curl -s -X POST -H "Authorization: Bearer $COOLIFY_TOKEN" "$COOLIFY_API_URL/apps/$app_id/deployments")
          echo "Deploy response: $deploy_response"
